class getAVLNode:
    def __init__(self):
        self.key = None
        self.left = None
        self.right = None
        self.height = 0
        self.bf = None

def insertAVL(T, newKey):
    p = T
    q = None
    x = None
    f = None
    stack = []

    # find position to insert newKey while storing parent node on stack
    while p is not None:
        if newKey == p.key: #키가 이미 노드에 존재
            print('i', newKey, ': The key already exists')
            return

        q = p
        stack.append(q)
        if newKey < p.key:
            p = p.left
        else:
            p = p.right

    # create new node
    y = getAVLNode()
    y.key = newKey

    # insert y as a child of q
    if T is None:
        T = y
    elif newKey < q.key:
        q.left = y
    else:
        q.right = y

    # update height and balancing factor while popping parent node from stack
    while stack:
        print('i', newKey, ': key')
        q = stack.pop()

        q.height = 1 + max(0 if q.left == None else q.left.height, 0 if q.right == None else q.right.height)
        q.bf = (0 if q.left == None else q.left.height) - (0 if q.right == None else q.right.height)
        if 1 < q.bf or q.bf < -1:
            if x is None:
                x = q
                #f = stack[-1]
    # if there's no problem, return
    global AVL_tree
    AVL_tree = T
    if x is None:
        return
    # rebalance tree
    if 1 < x.bf:
        if x.left is not None and x.left.bf < 0:
            T.left = l_rotate(T.left) #LR
        else:
            T = r_rotate(T) #LL
    else:
        if x.right is not None and x.right.bf > 0:
            T.right = r_rotate(T.right) #RL
        else:
            T = l_rotate(T) #RR

    AVL_tree = T

    print('123123')

#checkBalance(T, newKey, rotationType, p, q)

#rotateTree(T, rotationType, p, q)

#deleteBST(T, deleteKey)

def r_rotate(T): #오른쪽 회전
    x = T.left
    T.left = x.right
    x.right = T
    T.height = 1 + max(0 if T.left == None else T.left.height, 0 if T.right == None else T.right.height)
    x.height = 1 + max(0 if x.left == None else x.left.height, 0 if x.right == None else x.right.height)
    return x

def l_rotate(T): #왼쪽 회전
    x = T.right
    T.right = x.left
    x.left = T
    T.height = 1 + max(0 if T.left == None else T.left.height, 0 if T.right == None else T.right.height)
    x.height = 1 + max(0 if x.left == None else x.left.height, 0 if x.right == None else x.right.height)
    return x

def inorderAVL(T):
    if T is not None:
        inorderAVL(T.left)
        print(T.key,end=' ')
        inorderAVL(T.right)


f = open('AVL-input.txt', 'r')

global AVL_tree
AVL_tree = None

for line in f:
    cmd, key = line.split()
    if cmd == 'i':
        insertAVL(AVL_tree,int(key))
    elif cmd == 'd':
        print()
        #deleteAVL(AVL_tree,int(key))
    inorderAVL(AVL_tree)
    print()
